// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task.proto

/*
Package task is a generated protocol buffer package.

It is generated from these files:
	task.proto

It has these top-level messages:
	Task
	TaskList
*/
package task

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import autotest_protobuf1 "github.com/scaumiao/autotest/proto/job"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// message CreateTaskRequest {
//     string name = 1;
// }
// message CreateTaskResponse {
//     string id = 1;
// }
// message UpdateTaskRequest {
//     string id = 1;
//     string name = 2;
// }
type Task struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Script string `protobuf:"bytes,3,opt,name=script" json:"script,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

type TaskList struct {
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *TaskList) Reset()                    { *m = TaskList{} }
func (m *TaskList) String() string            { return proto.CompactTextString(m) }
func (*TaskList) ProtoMessage()               {}
func (*TaskList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TaskList) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func init() {
	proto.RegisterType((*Task)(nil), "autotest.protobuf.Task")
	proto.RegisterType((*TaskList)(nil), "autotest.protobuf.TaskList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskService service

type TaskServiceClient interface {
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	GetTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	GetTaskList(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*TaskList, error)
	DeleteTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	RunTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*autotest_protobuf1.Job, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/autotest.protobuf.TaskService/CreateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/autotest.protobuf.TaskService/GetTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskList(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := grpc.Invoke(ctx, "/autotest.protobuf.TaskService/GetTaskList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DeleteTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/autotest.protobuf.TaskService/DeleteTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/autotest.protobuf.TaskService/UpdateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RunTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*autotest_protobuf1.Job, error) {
	out := new(autotest_protobuf1.Job)
	err := grpc.Invoke(ctx, "/autotest.protobuf.TaskService/RunTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceServer interface {
	CreateTask(context.Context, *Task) (*Task, error)
	GetTask(context.Context, *Task) (*Task, error)
	GetTaskList(context.Context, *google_protobuf1.Empty) (*TaskList, error)
	DeleteTask(context.Context, *Task) (*Task, error)
	UpdateTask(context.Context, *Task) (*Task, error)
	RunTask(context.Context, *Task) (*autotest_protobuf1.Job, error)
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autotest.protobuf.TaskService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autotest.protobuf.TaskService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autotest.protobuf.TaskService/GetTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskList(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autotest.protobuf.TaskService/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DeleteTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autotest.protobuf.TaskService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autotest.protobuf.TaskService/RunTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RunTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "autotest.protobuf.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskService_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "GetTaskList",
			Handler:    _TaskService_GetTaskList_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskService_DeleteTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskService_UpdateTask_Handler,
		},
		{
			MethodName: "RunTask",
			Handler:    _TaskService_RunTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}

func init() { proto.RegisterFile("task.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x92, 0xcb, 0x4e, 0xe3, 0x30,
	0x14, 0x86, 0xd5, 0xcb, 0xf4, 0x72, 0xa2, 0xce, 0xa8, 0xae, 0x26, 0x13, 0xa5, 0x5d, 0x8c, 0xb2,
	0xaa, 0xaa, 0x99, 0x58, 0xd3, 0x59, 0x01, 0xbb, 0x02, 0x42, 0x42, 0xac, 0x52, 0x2a, 0x55, 0xec,
	0x9c, 0xd4, 0x14, 0x43, 0x13, 0x47, 0xb1, 0x53, 0x09, 0x21, 0x36, 0xbc, 0x02, 0x1b, 0xde, 0x8b,
	0x57, 0xe0, 0x41, 0x88, 0x9d, 0x44, 0xa8, 0x40, 0x59, 0x74, 0x91, 0xc4, 0xe7, 0xf6, 0xf9, 0xfc,
	0xbf, 0x02, 0x20, 0x89, 0xb8, 0x71, 0xe3, 0x84, 0x4b, 0x8e, 0xba, 0x24, 0x95, 0x5c, 0x52, 0x21,
	0xf3, 0xd8, 0x4f, 0x2f, 0xed, 0xc1, 0x92, 0xf3, 0xe5, 0x8a, 0x62, 0x12, 0x33, 0x4c, 0xa2, 0x88,
	0x4b, 0x22, 0x19, 0x8f, 0x44, 0xde, 0x60, 0xf7, 0x8b, 0x6a, 0xd9, 0x8e, 0x69, 0x18, 0xcb, 0xdb,
	0xa2, 0xd8, 0xd3, 0x1f, 0x7c, 0xcd, 0x7d, 0xf5, 0xe4, 0x49, 0x67, 0x02, 0xf5, 0xf3, 0xec, 0x42,
	0xf4, 0x1d, 0xaa, 0x6c, 0x61, 0x55, 0x7e, 0x57, 0x86, 0x6d, 0x2f, 0x3b, 0x21, 0x04, 0xf5, 0x88,
	0x84, 0xd4, 0xaa, 0xea, 0x8c, 0x3e, 0x23, 0x13, 0x1a, 0x22, 0x48, 0x58, 0x2c, 0xad, 0x9a, 0xce,
	0x16, 0x91, 0xb3, 0x07, 0x2d, 0xc5, 0x38, 0x63, 0x42, 0xa2, 0xbf, 0xf0, 0x4d, 0x09, 0x10, 0x19,
	0xaa, 0x36, 0x34, 0xc6, 0xbf, 0xdc, 0x0f, 0x12, 0x5c, 0xd5, 0xeb, 0xe5, 0x5d, 0xe3, 0xa7, 0x3a,
	0x18, 0x2a, 0x9e, 0xd2, 0x64, 0xcd, 0x02, 0x8a, 0xa6, 0x00, 0x87, 0x09, 0x25, 0x92, 0xea, 0xa5,
	0xb6, 0x4d, 0xdb, 0xdb, 0x0a, 0x4e, 0xef, 0xe1, 0xf9, 0xe5, 0xb1, 0xda, 0x71, 0x5a, 0x78, 0xfd,
	0x0f, 0xab, 0x2b, 0xf6, 0x2b, 0x23, 0xe4, 0x41, 0xf3, 0x84, 0xca, 0x1d, 0x89, 0x3f, 0x35, 0xf1,
	0x07, 0xea, 0x94, 0x44, 0x7c, 0xc7, 0x16, 0xf7, 0x68, 0x06, 0x46, 0xc1, 0xd4, 0xb2, 0x4d, 0x37,
	0x77, 0xfe, 0x6d, 0xf8, 0x58, 0x39, 0x6f, 0xf7, 0xb7, 0x60, 0xd5, 0x90, 0xd3, 0xd5, 0x68, 0x03,
	0xb5, 0x4b, 0xb4, 0xc8, 0xb0, 0x70, 0x44, 0x57, 0x74, 0x67, 0xfd, 0xc5, 0xb6, 0xa3, 0x77, 0xdb,
	0xce, 0x01, 0x66, 0xf1, 0x62, 0x77, 0x5b, 0x2d, 0x8d, 0x45, 0xf6, 0x26, 0x56, 0x79, 0x3b, 0x87,
	0xa6, 0x97, 0x46, 0x5f, 0x63, 0xcd, 0x4f, 0x0a, 0xa7, 0xdc, 0x77, 0x06, 0x9a, 0x6a, 0x3a, 0xdd,
	0x0d, 0x2a, 0x4e, 0xd2, 0x28, 0x23, 0x4f, 0xdc, 0x8b, 0x3f, 0x4b, 0x26, 0xaf, 0x52, 0xdf, 0x0d,
	0x78, 0x88, 0x45, 0x40, 0xd2, 0x90, 0x11, 0x8e, 0x4b, 0x54, 0xfe, 0x8f, 0xeb, 0xb1, 0x03, 0xf5,
	0xf2, 0x1b, 0x3a, 0xf1, 0xff, 0x35, 0x00, 0x00, 0xff, 0xff, 0x86, 0xc2, 0x2f, 0x99, 0x41, 0x03,
	0x00, 0x00,
}
